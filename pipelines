# -*- coding: utf-8 -*-
import pymysql
from pymysql import cursors

# 使用twsited异步IO框架，实现数据的异步写入
#from twisted.enterprise import adbapi


# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html


class BuffPipeline(object):
    # def __init__(self, dbpool):
    #     self.dbpool = dbpool
    #
    # def from_settings(cls, settings):
    #     """
    #     函数名称时固定的，scrapy会自动调用这些函数
    #     :param setting:
    #     :return:
    #     """
    #     params = dict(
    #         host=settings['MYSQL_HOST'],
    #         port=settings['MYSQL_PORT'],
    #         db=settings['MYSQL_DB'],
    #         user=settings['MYSQL_USER'],
    #         passwd=settings['MYSQL_PASSWD'],
    #         charset=settings['MYSQL_CHARSET'],
    #         cursorclass=pymysql.cursors.DictCursor
    #     )
    #
    #     # 创建数据库连接池对象，这个连接池可以包含多个connect连接对象
    #     # 参数1：操作数据库的包名
    #     # 参数2：连接数据库的参数
    #     db_connect_pool = adbapi.ConnectionPool('pymysql', **params)
    #
    #     # 初始化这个类的对象
    #     obj = cls(db_connect_pool)
    #     return obj
    #
    #
    # def process_item(self, item, spider):
    #     """
    #     在连接池中，开始执行数据的多线程写入操作
    #     :param item:
    #     :param spider:
    #     :return:
    #     """
    #     # conn = pymysql.connect(host="127.0.0.1", user="root", password="123456",
    #     #                        db='decorates', charset="utf8")
    #     # cursor = conn.cursor()
    #     result = self.dbpool.runInteraction(self.insert, item)
    #     # 给result绑定一个回调函数，用于监听错误信息
    #     result.addErrback(self.error)
    #
    # def error(self, reason):
    #     print('---------------', reason)
    #
    # # 下面是数据库的插入语句
    # def insert(self, cursor, item):
    #     for i in range(len(item['price'])):
    #         id = item['id']
    #         d_name = item['d_name']
    #         h_name = item['h_name']
    #         nbuy = item['nbuy']
    #         nsell = item['nsell']
    #         price = item['price'][i]
    #         sql = ('INSERT INTO BUFF(id,d_name,h_name,nbuy,nsell,price) VALUES (%s,%s,%s,%s,%s,%s)')
    #         a = (id, d_name, h_name, nbuy, nsell, price)
    #         cursor.execute(sql, a)
    #         # conn.commit()
    #         # conn.close()
    #
    #         return item
    """
    先用正常方法
    """
    def process_item(self, item, spider):
        conn = pymysql.connect(host="127.0.0.1", user="root", password="123456",
                                   db='test', charset="utf8")
        cursor = conn.cursor()
        if isinstance(item['price'], list):
            for i in range(len(item['price'])):
                id = item['id']
                d_name = item['d_name']
                h_name = item['h_name']
                nbuy = item['nbuy']
                nsell = item['nsell'][0]
                price = item['price'][i]
                x = int(nbuy)
                y = float(price)
                if x < 5 or y < 5:
                    break
                else:
                    sql = ('INSERT INTO buff(id,d_name,h_name,nbuy,nsell,price) VALUES (%s,%s,%s,%s,%s,%s)')
                    a = (id, d_name, h_name, nbuy, nsell, price)
                    # print(item)
                    cursor.execute(sql, a)
                    conn.commit()
        else:
            id = item['id']
            d_name = item['d_name']
            h_name = item['h_name']
            nbuy = item['nbuy']
            nsell = item['nsell'][0]
            price = item['price']
            x = int(nbuy)
            y = float(price)
            if x > 5 and y > 5:
                sql = ('INSERT INTO test_buff(id,d_name,h_name,nbuy,nsell,price) VALUES (%s,%s,%s,%s,%s,%s)')
                a = (id, d_name, h_name, nbuy, nsell, price)
                cursor.execute(sql, a)
                conn.commit()
            # conn.close()

        return item
